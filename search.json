[{"title":"3D RPG 学习笔记","date":"2021-07-23T07:38:31.000Z","url":"/2021/07/23/3D-RPG-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","tags":[["unity","/tags/unity/"]],"categories":[["学习","/categories/%E5%AD%A6%E4%B9%A0/"]],"content":" 一、创建项目导入素材 创建普通项目 在Package Manager中安装Universal RP 在Asset中创建Rendering =&gt; Universal Render Pipeline =&gt; Pipeline Asset(URP的设置文件) 将project setting中Graphics和Quality的渲染管线设置为刚创建的渲染管线设置文件 导入素材（Dog Knight PBR Polyart、 Low-Poly Simple Nature Pack 和 FREE Skybox Extended Shader） 在Edit =&gt; Edit=Render Pipeline =&gt; Universal Render Pipeline 中设置当前项目或当前素材的渲染管线 在Lighting =&gt; Environment 中设置天空盒的材质 注意Asset窗口和Inspect窗口的物体分类，方便管理 安装package PolyBrush 调整地面的高度(左键直接点击变高，control+左键点击变矮) Outer Radius：外圈大小 Inner Radius：内圈大小 Strength：变化强度 Direction：设置变化的方向。Brush normal：材质的法线方向 Brush Mirroring：沿坐标轴对称形成另一个笔刷同时进行相同操作 柔化：将比较突出的棱角变的平滑。设置基本同上 将当前物体刷上不同的颜色 如果需要将颜色刷到物体上，则物体材质的 shader 需要为 Polybrush=&gt; Shader 下的shader Brush：根据笔刷的大小刷上颜色 Fill：填充区块 Flood：整个物体 将预制体刷到场景当中 基本设置同1 将需要的prefab添加到Current Palette中，当前选中的prefab会在Brush Loadout中 Brush Loadout 中prefab下的拖动条表示此物体出现的概率 Hit Surface is Parent：将所有的画在平面上的物体都是此平面的子物体 将texture刷到场景当中 同4 Pro Builder 按住shift可以查看图标的功能 Pro Grids 安装ProGrids需要在Project Setting的Package Manger中打开允许preview Navigation自动导航 点击移动 自定义事件的注册和调用 注册 调用 屏幕射线转为世界射线 单例模式 方便事件函数等在外部的调用 事件注册和调用 功能实现 鼠标指针图片切换 Cinemachine：多功能相机插件 Post Processing：后处理 Animator A "},{"title":"每日一题","date":"2021-07-19T07:49:14.000Z","url":"/2021/07/19/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/","tags":[["C#","/tags/C/"],["Leetcode","/tags/Leetcode/"]],"categories":[["每日一题","/categories/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"]],"content":" 面试题 10.02. 变位词组编写一种方法，对字符串数组进行排序，将所有变位词组合在一起。变位词是指字母相同，但排列不同的字符串 示例： 说明： 所有输入均为小写字母。 不考虑答案输出的顺序 题解： 思路：计数法。 计算每个字符串中所有字符出现的个数，将相同的放在同一个list中，完成分类 代码： 1877. 数组中最大数对和的最小值题解： 分析： 最大与最小相加产生的数对和最小，即第k大的数和第k小的数相加，所得的最大数对和最小. 所以先将数组进行排序，然后依次下相加比较，即得出结果 代码： 1893. 检查是否区域内所有整数都被覆盖题解： 分析： 暴力解法，用一个 right-left+1 大小的数组来记录，直接通过二重循环，依次判断ranges中的每个[start,end]中是否包含[left,right]中的任意数字，如果包含，则对应的数组的值加一，循环完毕后再次循环判断数组中是否有0，有则为false，没有返回true。 代码： 1743. 从相邻元素对还原数组题解： 分析： 将数组中的数对用字典储存，则数组头或尾中字典的list的长度只有1，然后在通过字典，一次查找下一个 代码： "},{"title":"VRTK学习记录","date":"2021-06-06T11:27:43.000Z","url":"/2021/06/06/VRTK%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/","tags":[["错误总结","/tags/%E9%94%99%E8%AF%AF%E6%80%BB%E7%BB%93/"],["经验","/tags/%E7%BB%8F%E9%AA%8C/"]],"categories":[["学习","/categories/%E5%AD%A6%E4%B9%A0/"]],"content":" 配置环境unity 2018.4.14VRTK 3.3.0steamVR 1.2.3 键鼠模拟基本操作 wasd控制人物移动 鼠标默认控制人物方向 alt切换控制模式 鼠标：控制人物方向 —&gt;控制左右Controller的水平位置 ctrl：按住ctrl控制Controller的垂直位置 tab切换左右Controller ctrl 切换为抓取物体模式 鼠标右键为右Controller抓取 鼠标左键为左Controller抓取 shift 奔跑 q 发出射线 鼠标右键代表Controller的扳机 基本配置 新建场景，删除原本的Camera。 simulator为键鼠模拟；steamVr为设备操作；[VRSimulator_CameraRig]是VRTK的prefab，可直接使用； RightController 为右控制器； LeftController 为左控制器； PlayArea 为需要传送时添加。 VRTK SDK 需要添加VRTK_SDKManager 组件，并将子物体simulator和steamVR添加到组件中Setups的列表中（因为只需要键鼠模拟，所以只添加了simulator），然后将左右手控制器分别添加到Scripts Aliases中。 Simulator和SteamVR需要添加VRTK_SDK Setup 组件，并将Quick Select设置为相应的模式 Controller相关控制器基本组件​ ​ ​ ​ 射线类型可以为直线(VRTK_Straight Pointer Renderer)或贝塞尔曲线(VRTK_Bezier Pointer Renderer) ​ Heighlighter …. ； VRTK_UI Pointer为ui互动所必须组件 射线与场景互动控制器上可以添加自定义脚本，使之可以与场景中的物体进行互动,脚本参考VRTK_ControllerPointerEvents_ListenerExample ​ "},{"title":"JavaScript","date":"2021-04-25T08:12:15.000Z","url":"/2021/04/25/Web/","categories":[["Web","/categories/Web/"]],"content":" 概念外部JavaScript脚本的调用：&lt;script src = &quot;../../路径&quot;&gt;&lt;/scripts&gt; NaN：not a Number 逻辑运算（&amp;&amp;）：谁在表达式中起关键性作用，结果就是谁例：true &amp;&amp; 4 &amp;&amp; “aaa”x输出 “aaa” 0 &nbsp;&nbsp; “0” &nbsp;&nbsp; “” &nbsp;&nbsp; null &nbsp;&nbsp; NaN &nbsp;&nbsp; undefined =&gt; false 用 new 创建的对象为引用类型（object） 预定义函数parseInt():将字符转化为Int eval(string):string为一个可计算的字符串或者是可执行的表达式 对象prototype可以为一个类创建一个共有的模板新new的对象会调用模板中的属性 数组cars = [“0”, 2, new Object()];//数组中的元素可以不同 joinjoin() : 将数组中的元素拼接成字符串，默认连接符为“,” splicesplice(index, howmany, [item1, … , itemx], item, …) : howmany为从index的位置开始删除元素的个数，后面的为插入的元素 sortsort(function(a,b){return b - a}); 数字的降序排列sort(function(a,b){return a - b}); 数字的升序排列 Dateunix时间戳，从1970.1.1到xxxx.xx.xx的毫秒数 Mathround() 四舍五入random() 返回0~1的随机数"},{"title":"数电","date":"2021-04-19T13:05:33.000Z","url":"/2021/04/19/%E6%95%B0%E7%94%B5/","tags":[["学习","/tags/%E5%AD%A6%E4%B9%A0/"]],"categories":[["数电","/categories/%E6%95%B0%E7%94%B5/"]],"content":" 第四章：组合逻辑电路编码器 译码器 选择器 \\mid \\mathrm{Y}_{1}=\\left[\\mathrm{D}_{10}\\left(\\mathrm{~A}_{1} \\mathrm{~A}_{0}^{\\prime}\\right)+\\mathrm{D}_{11}\\left(\\mathrm{~A}_{1}^{\\prime} \\mathrm{A}_{0}\\right)+\\mathrm{D}_{12}\\left(\\mathrm{~A}_{1} \\mathrm{~A}_{0}^{\\prime}\\right)+\\mathrm{D}_{13}\\left(\\mathrm{~A}_{1} \\mathrm{~A}_{0}\\right)\\right]^{*} \\mathrm{~S}_{1}加法器一位加法器 多位加法器 \\begin{array}{l} (\\boldsymbol{C I})_{i}=(\\boldsymbol{C O})_{i-1} \\\\ \\boldsymbol{S}_{i}=\\boldsymbol{A}_{i} \\oplus \\boldsymbol{B}_{i} \\oplus(\\boldsymbol{C I})_{i} \\\\ (\\boldsymbol{C O})_{i}=A_{i} \\boldsymbol{B}_{i}+\\left(\\boldsymbol{A}_{i}+\\boldsymbol{B}_{i}\\right)(\\boldsymbol{C I})_{i} \\end{array}数值比较器一位数值比较器 "},{"title":"TANKS! Unity Tutorial 项目学习记录","date":"2021-04-13T15:25:35.000Z","url":"/2021/04/13/Tanks%E9%A1%B9%E7%9B%AE%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/","tags":[["Unity","/tags/Unity/"],["学习","/tags/%E5%AD%A6%E4%B9%A0/"]],"categories":[["Unity","/categories/Unity/"]],"content":" APISmoothDamp平滑的改变当前值至另一个值 *current*：当前位置 *target*：尝试达到的目标值 *currentVelocity*：当前速度，该值在每次调用时都会由函数修改。 *smoothTime*：达到目标值的时间 *maxSpeed*：最大速度 *deltaTime*：默认为Time.deltatime *ref关键字*：相当于c的指针传参，及引用传参。 InverseTransformPoint 将position这个Vector3类型变量转化为 以V3的世界坐标为零点基准的情况下 position相对于V3的坐标值。 PhysicsPhysics.OverlapSphere检测范围内的Collider public static Collider[] OverlapSphere(Vector3 position, float radius, int layerMask = AllLayers, QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal); *position*：圆心 *radius*：检测半径 *layerMask*：检测层级 *queryTriggerInteraction*：判断是否应该检测Trigger RigidbodytargetRigidbody.AddExplosionForce爆炸力将随着到物体的距离变小。 public void AddExplosionForce(float explosionForce, Vector3 explosionPosition, float explosionRadius, float upwardsModifier = 0.0f, ForceMode mode = ForceMode.Force)); *explosionForce*：爆炸的力量（会根据距离变化） *explosionPosition*：爆炸中心 *explosionRadius*：爆炸半径 *upwardsModifier*：可以调整爆炸的位置，让物体有被炸起来向上的效果，但爆炸本身的位置不变 *ForceMode*：对物体施加力的方法 Manual相机的两种投影方式 透视投影(Perspective)(左): 正交投影的观察体是长方体，它使用一组平行投影将三维对象投影到投影平面上去，即场景中的物体没有近大远小的效果。 正交投影(Orthographic)(右): 透视投影的观察体是视锥体，它使用一组由投影中心产生的放射投影线，将三维对象投影到投影平面上去，即屏幕中的物体存在透视效果 Aodio Mixer类似于Windows的音量合成器，但更为复杂可以用来进行多种音效的混合表现要用可百度学习 问题与解决移动和旋转问题有问题的代码 此代码会导致物体旋转后会继续以世界坐标的z轴为前后方向，而导致旋转看起来不起作用，像坐标轴没有跟着旋转一样 正确的代码 修改后一切正常 Vector3.forward和transform.forward的区别 Vector3.forward的值永远是世界坐标（0,0,1），而transform.forward是世界坐标对应的物体坐标的轴的向量 代码记录相机的平滑运动 移动相关 缩放相关 炮弹的爆炸和伤害判定 爆炸相关 计算伤害 子弹的对象池模式 子弹 对象池 IPooler 学习总结游戏循环模式(协程完成) 游戏管理模式一些游戏物体的代码不需要继承MonoBehaviour（无需挂载），只当实例化后赋予其GameObject或直接更具里面的信息实例化一个物体。例如此例中的Tank 或者 一些随机地图的部分地图信息 可能的心得(……..) 协程内调用多个协程，只会在上一个协程调用完成后，下一个协程才会开始 回合制的游戏可以使用协程控制游戏流程，开始、游玩、结束，都很清晰明了 写代码时因该将所有功能块写成函数，可以让代码结构更清晰 尽量将可能的变量全定义在类的开头，理由同上 "},{"title":"部署网站的记录","date":"2021-04-13T08:56:13.000Z","url":"/2021/04/13/Demo/","tags":[["错误总结","/tags/%E9%94%99%E8%AF%AF%E6%80%BB%E7%BB%93/"],["经验","/tags/%E7%BB%8F%E9%AA%8C/"]],"categories":[["学习","/categories/%E5%AD%A6%E4%B9%A0/"]],"content":" 总结网页属性 其他提示信息 折叠相关 折叠的折叠框 预先打开的折叠框 提示 提示框 type是框的类型·successs·danger·info·warning 图片插入图片需要放在source文件夹下的images下 字体颜色 color=#00ffff 颜色表参考 参考部分参考来源"}]