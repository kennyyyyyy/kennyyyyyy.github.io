<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Imperio</title>
  
  <subtitle>Boy♂ Next♂ Door~</subtitle>
  <link href="http://kennyyyyyy.github.io/atom.xml" rel="self"/>
  
  <link href="http://kennyyyyyy.github.io/"/>
  <updated>2021-07-19T08:00:04.991Z</updated>
  <id>http://kennyyyyyy.github.io/</id>
  
  <author>
    <name>kennyyy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>每日一题</title>
    <link href="http://kennyyyyyy.github.io/2021/07/19/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    <id>http://kennyyyyyy.github.io/2021/07/19/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/</id>
    <published>2021-07-19T07:49:14.000Z</published>
    <updated>2021-07-19T08:00:04.991Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h4 id="面试题-10-02-变位词组"><a href="#面试题-10-02-变位词组" class="headerlink" title="面试题 10.02. 变位词组"></a><a href="https://leetcode-cn.com/problems/group-anagrams-lcci/">面试题 10.02. 变位词组</a></h4><p>编写一种方法，对字符串数组进行排序，将所有变位词组合在一起。变位词是指字母相同，但排列不同的字符串</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入: [&quot;eat&quot;, &quot;tea&quot;, &quot;tan&quot;, &quot;ate&quot;, &quot;nat&quot;, &quot;bat&quot;],</span><br><span class="line">输出:</span><br><span class="line">[</span><br><span class="line">  [&quot;ate&quot;,&quot;eat&quot;,&quot;tea&quot;],</span><br><span class="line">  [&quot;nat&quot;,&quot;tan&quot;],</span><br><span class="line">  [&quot;bat&quot;]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>说明：</strong></p><ul><li>所有输入均为小写字母。</li><li>不考虑答案输出的顺序</li></ul><h4 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h4><ol><li><p><strong>思路</strong>：计数法。</p><p>计算每个字符串中所有字符出现的个数，将相同的放在同一个list中，完成分类</p></li><li><p><strong>代码</strong>：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> IList&lt;IList&lt;<span class="built_in">string</span>&gt;&gt; GroupAnagrams(<span class="built_in">string</span>[] strs) &#123;</span><br><span class="line">        </span><br><span class="line">        IList&lt;IList&lt;<span class="built_in">string</span>&gt;&gt; vs = <span class="keyword">new</span> List&lt;IList&lt;<span class="built_in">string</span>&gt;&gt;();</span><br><span class="line"><span class="comment">// 用字典储存相同的字符串</span></span><br><span class="line">        Dictionary&lt;<span class="built_in">string</span>, IList&lt;<span class="built_in">string</span>&gt;&gt; pairs = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, IList&lt;<span class="built_in">string</span>&gt;&gt;();</span><br><span class="line">        <span class="comment">// 用list储存出现过的key</span></span><br><span class="line">        IList&lt;<span class="built_in">string</span>&gt; keysss = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//循环计算所有字符串中出现字符的次数，并通过key将字符串添加到相应的pairs中，最终结果key也添加到keysss列表中</span></span><br><span class="line">        <span class="keyword">foreach</span>(<span class="keyword">var</span> str <span class="keyword">in</span> strs)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">string</span> key = <span class="keyword">new</span> <span class="built_in">string</span>(<span class="string">&#x27;0&#x27;</span>, <span class="number">26</span>);</span><br><span class="line">            <span class="keyword">foreach</span>(<span class="keyword">var</span> val <span class="keyword">in</span> str)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> keys = key.ToCharArray();</span><br><span class="line">                keys[val - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">                key = <span class="keyword">new</span> <span class="built_in">string</span>(keys);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (pairs.ContainsKey(key))</span><br><span class="line">            &#123;</span><br><span class="line">                pairs[key].Add(str);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                IList&lt;<span class="built_in">string</span>&gt; temp = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">                temp.Add(str);</span><br><span class="line">                pairs.Add(key, temp);</span><br><span class="line">            &#125; </span><br><span class="line">            <span class="keyword">if</span> (!keysss.Contains(key))</span><br><span class="line">            &#123;</span><br><span class="line">                keysss.Add(key);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//取出字典中的数据，存到list中</span></span><br><span class="line">        <span class="keyword">foreach</span>(<span class="keyword">var</span> key <span class="keyword">in</span> keysss)</span><br><span class="line">        &#123;</span><br><span class="line">            vs.Add(pairs[key]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> vs;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;
&lt;h4 id=&quot;面试题-10-02-变位词组&quot;&gt;&lt;a href=&quot;#面试题-10-02-变位词组&quot; class=&quot;headerlink&quot; title=&quot;面试题 10.02. 变位词组&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://le</summary>
      
    
    
    
    <category term="每日一题" scheme="http://kennyyyyyy.github.io/categories/%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98/"/>
    
    
    <category term="C#" scheme="http://kennyyyyyy.github.io/tags/C/"/>
    
    <category term="Leetcode" scheme="http://kennyyyyyy.github.io/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>VRTK学习记录</title>
    <link href="http://kennyyyyyy.github.io/2021/06/06/VRTK%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <id>http://kennyyyyyy.github.io/2021/06/06/VRTK%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</id>
    <published>2021-06-06T11:27:43.000Z</published>
    <updated>2021-07-20T07:49:55.781Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h3 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h3><p>unity 2018.4.14<br>VRTK 3.3.0<br>steamVR 1.2.3</p><h3 id="键鼠模拟基本操作"><a href="#键鼠模拟基本操作" class="headerlink" title="键鼠模拟基本操作"></a>键鼠模拟基本操作</h3><ul><li>wasd控制人物移动</li><li>鼠标默认控制人物方向</li><li>alt切换控制模式<ul><li>鼠标：控制人物方向 —&gt;控制左右Controller的水平位置</li><li>ctrl：按住ctrl控制Controller的垂直位置</li></ul></li><li>tab切换左右Controller</li><li>ctrl 切换为抓取物体模式<ul><li>鼠标右键为右Controller抓取</li><li>鼠标左键为左Controller抓取</li></ul></li><li>shift 奔跑</li><li>q 发出射线<ul><li>鼠标右键代表Controller的扳机</li></ul></li></ul><h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><ol><li><p>新建场景，删除原本的Camera。</p></li><li><p>simulator为键鼠模拟；steamVr为设备操作；[VRSimulator_CameraRig]是VRTK的prefab，可直接使用；</p><p>RightController 为右控制器； LeftController 为左控制器； PlayArea 为需要传送时添加。</p><p><img src="/.io//Users\Imperio\AppData\Roaming\Typora\typora-user-images\image-20210720110238352.png" alt="image-20210720110238352"></p></li><li><p>VRTK SDK 需要添加VRTK_SDKManager 组件，并将子物体simulator和steamVR添加到组件中Setups的列表中（因为只需要键鼠模拟，所以只添加了simulator），然后将左右手控制器分别添加到Scripts Aliases中。</p></li></ol><ol><li><p>Simulator和SteamVR需要添加VRTK_SDK Setup 组件，并将Quick Select设置为相应的模式</p><p><img src="/.io//VRTK_SDKSetup.jpg" alt="Setup"></p></li></ol><h3 id="控制器基本组件"><a href="#控制器基本组件" class="headerlink" title="控制器基本组件"></a>控制器基本组件</h3><ol><li>抓取物体</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;
&lt;h3 id=&quot;配置环境&quot;&gt;&lt;a href=&quot;#配置环境&quot; class=&quot;headerlink&quot; title=&quot;配置环境&quot;&gt;&lt;/a&gt;配置环境&lt;/h3&gt;&lt;p&gt;unity 2018.4.14&lt;br&gt;VRTK 3.3.0&lt;br&gt;steam</summary>
      
    
    
    
    <category term="学习" scheme="http://kennyyyyyy.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="错误总结" scheme="http://kennyyyyyy.github.io/tags/%E9%94%99%E8%AF%AF%E6%80%BB%E7%BB%93/"/>
    
    <category term="经验" scheme="http://kennyyyyyy.github.io/tags/%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript</title>
    <link href="http://kennyyyyyy.github.io/2021/04/25/Web/"/>
    <id>http://kennyyyyyy.github.io/2021/04/25/Web/</id>
    <published>2021-04-25T08:12:15.000Z</published>
    <updated>2021-04-26T09:49:10.622Z</updated>
    
    <content type="html"><![CDATA[<!--  more --><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>外部JavaScript脚本的调用：<code>&lt;script  src = &quot;../../路径&quot;&gt;&lt;/scripts&gt;</code></p><p>NaN：not a Number</p><p>逻辑运算（&amp;&amp;）：谁在表达式中起关键性作用，结果就是谁<br>例：<code>true &amp;&amp; 4 &amp;&amp; “aaa”</code><br>x输出 “aaa”</p><p>0 &nbsp;&nbsp; “0” &nbsp;&nbsp; “” &nbsp;&nbsp; null &nbsp;&nbsp; NaN &nbsp;&nbsp; undefined  =&gt; false</p><p>用 new 创建的对象为引用类型（object）</p><h2 id="预定义函数"><a href="#预定义函数" class="headerlink" title="预定义函数"></a>预定义函数</h2><p>parseInt():将字符转化为Int</p><p>eval(string):string为一个可计算的字符串或者是可执行的表达式</p><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><h3 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a>prototype</h3><p>可以为一个类创建一个共有的模板<br>新new的对象会调用模板中的属性</p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p><code>cars = [“0”, 2, new Object()];</code>//数组中的元素可以不同</p><h3 id="join"><a href="#join" class="headerlink" title="join"></a>join</h3><p>join() : 将数组中的元素拼接成字符串，默认连接符为“,”</p><h3 id="splice"><a href="#splice" class="headerlink" title="splice"></a>splice</h3><p>splice(index, howmany, [item1, … , itemx], item, …) : howmany为从index的位置开始删除元素的个数，后面的为插入的元素</p><h3 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h3><p>sort(function(a,b){return b - a}); 数字的降序排列<br><br>sort(function(a,b){return a - b}); 数字的升序排列</p><h2 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h2><p>unix时间戳，从1970.1.1到xxxx.xx.xx的毫秒数</p><h2 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h2><h3 id="round-四舍五入"><a href="#round-四舍五入" class="headerlink" title="round() 四舍五入"></a>round() 四舍五入</h3><h3 id="random-返回0-1的随机数"><a href="#random-返回0-1的随机数" class="headerlink" title="random() 返回0~1的随机数"></a>random() 返回0~1的随机数</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;!--  more --&gt;
&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;p&gt;外部JavaScript脚本的调用：&lt;code&gt;&amp;lt;script  src = &amp;quot;../../路</summary>
      
    
    
    
    <category term="Web" scheme="http://kennyyyyyy.github.io/categories/Web/"/>
    
    
  </entry>
  
  <entry>
    <title>数电</title>
    <link href="http://kennyyyyyy.github.io/2021/04/19/%E6%95%B0%E7%94%B5/"/>
    <id>http://kennyyyyyy.github.io/2021/04/19/%E6%95%B0%E7%94%B5/</id>
    <published>2021-04-19T13:05:33.000Z</published>
    <updated>2021-04-20T12:39:26.832Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="第四章：组合逻辑电路"><a href="#第四章：组合逻辑电路" class="headerlink" title="第四章：组合逻辑电路"></a>第四章：组合逻辑电路</h1><h2 id="编码器"><a href="#编码器" class="headerlink" title="编码器"></a>编码器</h2><p><img src="/images/数电/1.二进制编码器.png" alt="二进制编码器"></p><p><img src="/images/数电/1.2-10进制编码器.png" alt="2-10进制编码器"></p><p><img src="/images/数电/1.优先编码器.png" alt="优先编码器"></p><p><img src="/images/数电/1.2-10进制优先编码器.png" alt="2-10进制优先编码器"></p><h2 id="译码器"><a href="#译码器" class="headerlink" title="译码器"></a>译码器</h2><p><img src="/images/数电/2.二进制译码器-低电平有效.png" alt="二进制译码器-低电平有效"> <img src="/images/数电/2.二进制译码器-高电平有效.png" alt="二进制译码器-高电平有效"> </p><p><img src="/images/数电/2.3线-8线译码器.png" alt="3线-8线译码器"></p><p><img src="/images/数电/2.2-10进制译码器.png" alt="2-10进制译码器"></p><p><img src="/images/数电/2.数码显示译码器.png" alt="数码显示译码器"></p><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><p><img src="/images/数电/3.数据选择器.png" alt="数据选择器"></p><script type="math/tex; mode=display">\mid \mathrm{Y}_{1}=\left[\mathrm{D}_{10}\left(\mathrm{~A}_{1} \mathrm{~A}_{0}^{\prime}\right)+\mathrm{D}_{11}\left(\mathrm{~A}_{1}^{\prime} \mathrm{A}_{0}\right)+\mathrm{D}_{12}\left(\mathrm{~A}_{1} \mathrm{~A}_{0}^{\prime}\right)+\mathrm{D}_{13}\left(\mathrm{~A}_{1} \mathrm{~A}_{0}\right)\right]^{*} \mathrm{~S}_{1}</script><h2 id="加法器"><a href="#加法器" class="headerlink" title="加法器"></a>加法器</h2><h3 id="一位加法器"><a href="#一位加法器" class="headerlink" title="一位加法器"></a>一位加法器</h3><p><img src="/images/数电/4.1位加法器-半加器.png" alt="半加器"></p><p><img src="/images/数电/4.1位加法器-全加器.png" alt="全加器"></p><h3 id="多位加法器"><a href="#多位加法器" class="headerlink" title="多位加法器"></a>多位加法器</h3><p><img src="/images/数电/4.多为加法器-超前进位加法器.png" alt="超前进位加法器"></p><p><img src="/images/数电/4.多为加法器-串行进位加法器.png" alt="串行进位加法器"> </p><script type="math/tex; mode=display">\begin{array}{l}(\boldsymbol{C I})_{i}=(\boldsymbol{C O})_{i-1} \\\boldsymbol{S}_{i}=\boldsymbol{A}_{i} \oplus \boldsymbol{B}_{i} \oplus(\boldsymbol{C I})_{i} \\(\boldsymbol{C O})_{i}=A_{i} \boldsymbol{B}_{i}+\left(\boldsymbol{A}_{i}+\boldsymbol{B}_{i}\right)(\boldsymbol{C I})_{i}\end{array}</script><h2 id="数值比较器"><a href="#数值比较器" class="headerlink" title="数值比较器"></a>数值比较器</h2><h3 id="一位数值比较器"><a href="#一位数值比较器" class="headerlink" title="一位数值比较器"></a>一位数值比较器</h3><p><img src="/images/数电/5.一位数值比较器.png" alt="一位数值比较器"></p><p><img src="/images/数电/5.多位数值比较器.png" alt="多位数值比较器"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;
&lt;h1 id=&quot;第四章：组合逻辑电路&quot;&gt;&lt;a href=&quot;#第四章：组合逻辑电路&quot; class=&quot;headerlink&quot; title=&quot;第四章：组合逻辑电路&quot;&gt;&lt;/a&gt;第四章：组合逻辑电路&lt;/h1&gt;&lt;h2 id=&quot;编码器&quot;&gt;&lt;a h</summary>
      
    
    
    
    <category term="数电" scheme="http://kennyyyyyy.github.io/categories/%E6%95%B0%E7%94%B5/"/>
    
    
    <category term="学习" scheme="http://kennyyyyyy.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>TANKS! Unity Tutorial 项目学习记录</title>
    <link href="http://kennyyyyyy.github.io/2021/04/13/Tanks%E9%A1%B9%E7%9B%AE%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <id>http://kennyyyyyy.github.io/2021/04/13/Tanks%E9%A1%B9%E7%9B%AE%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</id>
    <published>2021-04-13T15:25:35.000Z</published>
    <updated>2021-04-21T15:38:03.224Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><h3 id="SmoothDamp"><a href="#SmoothDamp" class="headerlink" title="SmoothDamp"></a>SmoothDamp</h3><p>平滑的改变当前值至另一个值<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Mathf.SmoothDamp(<span class="built_in">float</span> current, <span class="built_in">float</span> target, <span class="keyword">ref</span> <span class="built_in">float</span> currentVelocity, <span class="built_in">float</span> smoothTime, <span class="built_in">float</span> maxSpeed = Mathf.Infinity, <span class="built_in">float</span> deltaTime = Time.deltaTime);</span><br><span class="line"></span><br><span class="line"><span class="function">Vector3 <span class="title">SmoothDamp</span>(<span class="params">Vector3 current, Vector3 target, <span class="keyword">ref</span> Vector3 currentVelocity, <span class="built_in">float</span> smoothTime, <span class="built_in">float</span> maxSpeed = Mathf.Infinity, <span class="built_in">float</span> deltaTime = Time.deltaTime</span>)</span>;</span><br></pre></td></tr></table></figure></p><font color="#c77eb5" size="2"> *current*：当前位置 </font><font color="#c77eb5" size="2"> *target*：尝试达到的目标值 </font><font color="#c77eb5" size="2"> *currentVelocity*：当前速度，该值在每次调用时都会由函数修改。</font><font color="#c77eb5" size="2"> *smoothTime*：达到目标值的时间 </font><font color="#c77eb5" size="2"> *maxSpeed*：最大速度 </font><font color="#c77eb5" size="2"> *deltaTime*：默认为Time.deltatime </font><font color="#c77eb5" size="2"> *ref关键字*：相当于c的指针传参，及引用传参。 </font><h3 id="InverseTransformPoint"><a href="#InverseTransformPoint" class="headerlink" title="InverseTransformPoint"></a>InverseTransformPoint</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Vector3 <span class="title">InverseTransformPoint</span>(<span class="params">Vector3 position</span>)</span>;</span><br></pre></td></tr></table></figure><p>将position这个Vector3类型变量转化为 以V3的世界坐标为零点基准的情况下 position相对于V3的坐标值。</p><h3 id="Physics"><a href="#Physics" class="headerlink" title="Physics"></a>Physics</h3><h4 id="Physics-OverlapSphere"><a href="#Physics-OverlapSphere" class="headerlink" title="Physics.OverlapSphere"></a>Physics.OverlapSphere</h4><p>检测范围内的Collider<br><code> public static Collider[] OverlapSphere(Vector3 position, float radius, int layerMask = AllLayers, QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal);</code></p><font color="#c77eb5" size="2"> *position*：圆心 </font><font color="#c77eb5" size="2"> *radius*：检测半径 </font><font color="#c77eb5" size="2"> *layerMask*：检测层级 </font><font color="#c77eb5" size="2"> *queryTriggerInteraction*：判断是否应该检测Trigger </font><h3 id="Rigidbody"><a href="#Rigidbody" class="headerlink" title="Rigidbody"></a>Rigidbody</h3><h4 id="targetRigidbody-AddExplosionForce"><a href="#targetRigidbody-AddExplosionForce" class="headerlink" title="targetRigidbody.AddExplosionForce"></a>targetRigidbody.AddExplosionForce</h4><p>爆炸力将随着到物体的距离变小。<br><code> public void AddExplosionForce(float explosionForce, Vector3 explosionPosition, float explosionRadius, float upwardsModifier = 0.0f, ForceMode mode = ForceMode.Force)); </code></p><font color="#c77eb5" size="2"> *explosionForce*：爆炸的力量（会根据距离变化）</font><font color="#c77eb5" size="2"> *explosionPosition*：爆炸中心 </font><font color="#c77eb5" size="2"> *explosionRadius*：爆炸半径 </font><font color="#c77eb5" size="2"> *upwardsModifier*：可以调整爆炸的位置，让物体有被炸起来向上的效果，但爆炸本身的位置不变 </font><font color="#c77eb5" size="2"> *ForceMode*：对物体施加力的方法 </font><h2 id="Manual"><a href="#Manual" class="headerlink" title="Manual"></a>Manual</h2><h3 id="相机的两种投影方式"><a href="#相机的两种投影方式" class="headerlink" title="相机的两种投影方式"></a>相机的两种投影方式</h3><p><img src="/images/Tanks项目学习记录/00.jpg" alt="相机的两种投影方式(prejection)"></p><p>透视投影(Perspective)(左): 正交投影的观察体是长方体，它使用一组平行投影将三维对象投影到投影平面上去，即场景中的物体没有近大远小的效果。</p><p>正交投影(Orthographic)(右): 透视投影的观察体是视锥体，它使用一组由投影中心产生的放射投影线，将三维对象投影到投影平面上去，即屏幕中的物体存在透视效果</p><h3 id="Aodio-Mixer"><a href="#Aodio-Mixer" class="headerlink" title="Aodio Mixer"></a>Aodio Mixer</h3><p>类似于Windows的音量合成器，但更为复杂<br>可以用来进行多种音效的混合表现<br>要用可百度学习</p><h2 id="问题与解决"><a href="#问题与解决" class="headerlink" title="问题与解决"></a>问题与解决</h2><h3 id="移动和旋转问题"><a href="#移动和旋转问题" class="headerlink" title="移动和旋转问题"></a>移动和旋转问题</h3><p>有问题的代码</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Vector3 move = Vector3.forward * m_MovementInputValue * Time.deltaTime * m_Speed;</span><br><span class="line">m_Rigidbody.MovePosition(m_Rigidbody.position + move);</span><br></pre></td></tr></table></figure><p>此代码会导致物体旋转后会继续以世界坐标的z轴为前后方向，而导致旋转看起来不起作用，像坐标轴没有跟着旋转一样</p><hr><p>正确的代码</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Vector3 move = transform.forward * m_MovementInputValue * Time.deltaTime * m_Speed;</span><br><span class="line">m_Rigidbody.MovePosition(m_Rigidbody.position + move);</span><br></pre></td></tr></table></figure><p>修改后一切正常</p><hr><div class="panel panel-warning">    <div class="panel-title">Vector3.forward和transform.forward的区别</div>    <div class="panel-body">        <p>Vector3.forward的值永远是世界坐标（0,0,1），<br>而transform.forward是世界坐标对应的物体坐标的轴的向量</p>    </div>    </div><h2 id="代码记录"><a href="#代码记录" class="headerlink" title="代码记录"></a>代码记录</h2><h3 id="相机的平滑运动"><a href="#相机的平滑运动" class="headerlink" title="相机的平滑运动"></a>相机的平滑运动</h3><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>移动相关</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Move</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FindAveragePosition();</span><br><span class="line"></span><br><span class="line">    transform.position = Vector3.SmoothDamp(transform.position, m_DesiredPosition, <span class="keyword">ref</span> m_MoveVelocity, m_DampTime);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 找到多个Player的中间位置</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">FindAveragePosition</span>(<span class="params"></span>)                      </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Vector3 averagePos = <span class="keyword">new</span> Vector3();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//记录还存在的Player的数量</span></span><br><span class="line">    <span class="built_in">int</span> numTargets = <span class="number">0</span>;                                 </span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; m_Targets.Length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!m_Targets[i].gameObject.activeSelf)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 记录Player的位置和</span></span><br><span class="line">        averagePos += m_Targets[i].position;            </span><br><span class="line">        numTargets++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//得到中间位置</span></span><br><span class="line">    <span class="keyword">if</span> (numTargets &gt; <span class="number">0</span>)                              </span><br><span class="line">        averagePos /= numTargets;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//保证相机的y轴不移动</span></span><br><span class="line">    averagePos.y = transform.position.y;               </span><br><span class="line"></span><br><span class="line">    m_DesiredPosition = averagePos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>     </div></div>    </div><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>缩放相关</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Zoom</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">float</span> requiredSize = FindRequiredSize();</span><br><span class="line">    m_Camera.orthographicSize = Mathf.SmoothDamp(m_Camera.orthographicSize, requiredSize, <span class="keyword">ref</span> m_ZoomSpeed, m_DampTime);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 找到需要的相机的最大大小</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>返回相机的合适大小<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="built_in">float</span> <span class="title">FindRequiredSize</span>(<span class="params"></span>)                    </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//获得相机将要到达的位置的相对坐标</span></span><br><span class="line">    Vector3 desiredLocalPos = transform.InverseTransformPoint(m_DesiredPosition);   </span><br><span class="line"></span><br><span class="line">    <span class="built_in">float</span> size = <span class="number">0f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获得还存活的Player的所需要的屏幕最大值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; m_Targets.Length; i++)                                      </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!m_Targets[i].gameObject.activeSelf)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//转化Player的坐标为相对值</span></span><br><span class="line">        Vector3 targetLocalPos = transform.InverseTransformPoint(m_Targets[i].position);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得Player中心位置与Player位置的差值</span></span><br><span class="line">        Vector3 desiredPosToTarget = targetLocalPos - desiredLocalPos;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//计算x/y轴的相对大小，并取最大值</span></span><br><span class="line">        size = Mathf.Max (size, Mathf.Abs (desiredPosToTarget.y));                  </span><br><span class="line"></span><br><span class="line">        size = Mathf.Max (size, Mathf.Abs (desiredPosToTarget.x) / m_Camera.aspect);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加缓冲区</span></span><br><span class="line">    size += m_ScreenEdgeBuffer;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//防止屏幕缩小</span></span><br><span class="line">    size = Mathf.Max(size, m_MinSize);                                              </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>     </div></div>    </div><h3 id="炮弹的爆炸和伤害判定"><a href="#炮弹的爆炸和伤害判定" class="headerlink" title="炮弹的爆炸和伤害判定"></a>炮弹的爆炸和伤害判定</h3><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>爆炸相关</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnTriggerEnter</span>(<span class="params">Collider other</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获得爆炸范围内的坦克collider</span></span><br><span class="line">    Collider[] colliders = Physics.OverlapSphere(transform.position, m_ExplosionRadius, m_TankMask);<span class="comment">//获得爆炸范围内的坦克collider</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; colliders.Length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Rigidbody targetRigidbody = colliders[i].GetComponent&lt;Rigidbody&gt;();</span><br><span class="line">        <span class="keyword">if</span> (!targetRigidbody)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//对范围内的tank的刚体施加一个力</span></span><br><span class="line">        targetRigidbody.AddExplosionForce(m_ExplosionForce, transform.position, m_ExplosionRadius);<span class="comment">//将</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得Tank的血量属性</span></span><br><span class="line">        TankHealth tankHealth = targetRigidbody.GetComponent&lt;TankHealth&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!tankHealth)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//计算伤害</span></span><br><span class="line">        <span class="built_in">float</span> damage = CalculateDamage(targetRigidbody.position);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//造成伤害</span></span><br><span class="line">        tankHealth.TakeDamage(damage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//粒子效果和声音的播放</span></span><br><span class="line">    m_ExplosionParticles.transform.parent = <span class="literal">null</span>;</span><br><span class="line">    m_ExplosionParticles.Play();</span><br><span class="line">    m_ExplosionAudio.Play();</span><br><span class="line"></span><br><span class="line"><span class="comment">//销毁</span></span><br><span class="line">    Destroy(m_ExplosionParticles.gameObject, m_ExplosionParticles.main.duration);</span><br><span class="line">    Destroy(gameObject);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>     </div></div>    </div><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>计算伤害</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="built_in">float</span> <span class="title">CalculateDamage</span>(<span class="params">Vector3 targetPosition</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//计算Tank和炸弹的向量</span></span><br><span class="line">    Vector3 explosionToTarget = targetPosition - transform.position;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获得距离</span></span><br><span class="line">    <span class="built_in">float</span> explosionDistance = explosionToTarget.magnitude;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//计算相对距离比例</span></span><br><span class="line">    <span class="built_in">float</span> relativeDistance = (m_ExplosionRadius - explosionDistance) / m_ExplosionRadius;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//计算伤害</span></span><br><span class="line">    <span class="built_in">float</span> damage = relativeDistance * m_MaxDamage;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//排除Tank在边缘时 相对比例 为负数的情况</span></span><br><span class="line">    damage = Mathf.Max(<span class="number">0</span>, damage);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> damage;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>     </div></div>    </div><h2 id="子弹的对象池模式"><a href="#子弹的对象池模式" class="headerlink" title="子弹的对象池模式"></a>子弹的对象池模式</h2><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>子弹</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ShellExplosion</span> : <span class="title">MonoBehaviour</span>,<span class="title">IPooler</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   ...一些其他代码</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//生成时的初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnSpawning</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line"><span class="comment">/* 初始化相关 */</span></span><br><span class="line">        StartCoroutine(Spawning());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//调用协程，一定时间后重置</span></span><br><span class="line">    <span class="function">IEnumerator <span class="title">Spawning</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">yield</span> <span class="keyword">return</span> m_TimeToFalse;</span><br><span class="line">        m_ExplosionParticles.transform.parent = gameObject.transform;</span><br><span class="line">        m_ExplosionParticles.transform.position = gameObject.transform.position;</span><br><span class="line">        gameObject.transform.position = <span class="keyword">new</span> Vector3(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        gameObject.SetActive(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>     </div></div>    </div><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>对象池</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ShellPool</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 对象池</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> tag:名称</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> prefab;预制体</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> size:对象池的大小</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    [<span class="meta">System.Serializable</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Pool</span>                          </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> tag;</span><br><span class="line">        <span class="keyword">public</span> GameObject prefab;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对象池的父物体</span></span><br><span class="line">    <span class="keyword">public</span> Transform parentTransform;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Pool&gt; poolList;</span><br><span class="line">    <span class="keyword">public</span> Dictionary&lt;<span class="built_in">string</span>, Queue&lt;GameObject&gt;&gt; poolDictionary;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//单例模式</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ShellPool shellPoolInsatance;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Awake</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (shellPoolInsatance == <span class="literal">null</span>)</span><br><span class="line">            shellPoolInsatance = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (shellPoolInsatance != <span class="keyword">this</span>)</span><br><span class="line">            Destroy(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 初始化生成所有对象池的物体，并添加到对象池字典中</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        poolDictionary = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">string</span>, Queue&lt;GameObject&gt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> pool <span class="keyword">in</span> poolList)</span><br><span class="line">        &#123;</span><br><span class="line">            Queue&lt;GameObject&gt; tPool = <span class="keyword">new</span> Queue&lt;GameObject&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; pool.size; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                GameObject tShell = Instantiate(pool.prefab, parentTransform,<span class="literal">true</span>);</span><br><span class="line">                tShell.SetActive(<span class="literal">false</span>);</span><br><span class="line">                tPool.Enqueue(tShell);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            poolDictionary.Add(pool.tag, tPool);</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 从对象池中生成（获得）物体</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;tag&quot;&gt;</span>物体名称<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;position&quot;&gt;</span>生成位置<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;rotation&quot;&gt;</span>生成旋转<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span>返回生成的对象<span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> GameObject <span class="title">SpawnFromPool</span>(<span class="params"><span class="built_in">string</span> tag, Vector3 position, Quaternion rotation</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment">//判断是否存在需要生成的物体</span></span><br><span class="line">        <span class="keyword">if</span>(!poolDictionary.ContainsKey(tag))</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(tag + <span class="string">&quot;不存在&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        GameObject theSpawnObj = poolDictionary[tag].Dequeue();</span><br><span class="line">        Debug.Log(theSpawnObj);</span><br><span class="line"></span><br><span class="line">        theSpawnObj.SetActive(<span class="literal">true</span>);</span><br><span class="line">        theSpawnObj.transform.position = position;</span><br><span class="line">        theSpawnObj.transform.rotation = rotation;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得IPooler接口，并调用初始化函数</span></span><br><span class="line">        IPooler poolSpawn = theSpawnObj.GetComponent&lt;IPooler&gt;();</span><br><span class="line">        <span class="keyword">if</span> (poolSpawn != <span class="literal">null</span>)</span><br><span class="line">            poolSpawn.OnSpawning();</span><br><span class="line"></span><br><span class="line">        poolDictionary[tag].Enqueue(theSpawnObj);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> theSpawnObj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>     </div></div>    </div><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>IPooler</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接口，方便生成物体后的初始化函数调用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title">IPooler</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnSpawning</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>     </div></div>    </div><h2 id="学习总结"><a href="#学习总结" class="headerlink" title="学习总结"></a>学习总结</h2><h3 id="游戏循环模式-协程完成"><a href="#游戏循环模式-协程完成" class="headerlink" title="游戏循环模式(协程完成)"></a>游戏循环模式(协程完成)</h3><p><img src="/images/Tanks项目学习记录/游戏循环.jpg" alt="循环模式"><br><img src="/images/Tanks项目学习记录/流程控制.jpg" alt="Tanks的流程控制"></p><h3 id="游戏管理模式"><a href="#游戏管理模式" class="headerlink" title="游戏管理模式"></a>游戏管理模式</h3><p>一些游戏物体的代码不需要继承MonoBehaviour（无需挂载），只当实例化后赋予其GameObject或直接更具里面的信息实例化一个物体。例如此例中的Tank 或者 一些随机地图的部分地图信息</p><h3 id="可能的心得-……"><a href="#可能的心得-……" class="headerlink" title="可能的心得(……..)"></a>可能的心得(……..)</h3><ul><li>协程内调用多个协程，只会在上一个协程调用完成后，下一个协程才会开始</li><li>回合制的游戏可以使用协程控制游戏流程，开始、游玩、结束，都很清晰明了</li><li>写代码时因该将所有功能块写成函数，可以让代码结构更清晰</li><li>尽量将可能的变量全定义在类的开头，理由同上</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;
&lt;h2 id=&quot;API&quot;&gt;&lt;a href=&quot;#API&quot; class=&quot;headerlink&quot; title=&quot;API&quot;&gt;&lt;/a&gt;API&lt;/h2&gt;&lt;h3 id=&quot;SmoothDamp&quot;&gt;&lt;a href=&quot;#SmoothDamp&quot; cla</summary>
      
    
    
    
    <category term="Unity" scheme="http://kennyyyyyy.github.io/categories/Unity/"/>
    
    
    <category term="Unity" scheme="http://kennyyyyyy.github.io/tags/Unity/"/>
    
    <category term="学习" scheme="http://kennyyyyyy.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>部署网站的记录</title>
    <link href="http://kennyyyyyy.github.io/2021/04/13/Demo/"/>
    <id>http://kennyyyyyy.github.io/2021/04/13/Demo/</id>
    <published>2021-04-13T08:56:13.000Z</published>
    <updated>2021-04-17T04:20:40.746Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="网页属性"><a href="#网页属性" class="headerlink" title="网页属性"></a>网页属性</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">title: 文章标题</span><br><span class="line">date: 创建时间</span><br><span class="line">categories: 分类</span><br><span class="line">tags:标签</span><br><span class="line">- Tag0</span><br><span class="line">- Tag1</span><br><span class="line">- Tag2</span><br><span class="line">sticky: 100数字越大优先级越高</span><br><span class="line">pic:指定预览图片，图片位置为同级目录下的同名文件夹</span><br><span class="line">comments: <span class="literal">true</span>是否开放评论</span><br><span class="line">toc: <span class="literal">true</span>是否生成目录</span><br><span class="line">only:在什么位置显示，如果没有就全部显示</span><br><span class="line">- home</span><br><span class="line">- category</span><br><span class="line">- tag</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>提示信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;% alertbox success <span class="string">&quot;成功&quot;</span> %&#125;</span><br><span class="line">&#123;% alertbox danger <span class="string">&quot;危险&quot;</span> %&#125;</span><br><span class="line">&#123;% alertbox info <span class="string">&quot;消息&quot;</span> %&#125;</span><br><span class="line">&#123;% alertbox warning <span class="string">&quot;警告&quot;</span> %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="折叠相关"><a href="#折叠相关" class="headerlink" title="折叠相关"></a>折叠相关</h3><div class="xControl">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>折叠的折叠框</span></div>    <div class="xContent"><div class="inner">        <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;% collapse 折叠框的标题 %&#125;</span><br><span class="line"></span><br><span class="line">被折叠的内容 1</span><br><span class="line">被折叠的内容 2</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&#123;% endcollapse %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>     </div></div>    </div><div class="xControl active">    <div class="xHeading"><div class="xIcon"><i class="fa fa-plus"></i></div><span>预先打开的折叠框</span></div>    <div class="xContent pre-open"><div class="inner">        <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;% collapse 折叠框的标题 open %&#125;</span><br><span class="line"></span><br><span class="line">被折叠的内容 1</span><br><span class="line">被折叠的内容 2</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&#123;% endcollapse %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>     </div></div>    </div><h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h3><div class="panel panel-info">    <div class="panel-title">提示框</div>    <div class="panel-body">        <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;% colorpanel TYPE 面板框的标题 %&#125;</span><br><span class="line"></span><br><span class="line">面板里的内容 1</span><br><span class="line">面板里的内容 2</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">&#123;% endcolorpanel %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>type是框的类型<br>·successs<br>·danger<br>·info<br>·warning</p>    </div>    </div><h3 id="图片插入"><a href="#图片插入" class="headerlink" title="图片插入"></a>图片插入</h3><p>图片需要放在source文件夹下的images下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">![图片描述](/images/图片名称.jpg)  </span><br><span class="line"></span><br><span class="line">![图片描述](/images/文件夹/图片名称.jpg) </span><br></pre></td></tr></table></figure></p><p><img src="/images/Demo/00.jpg" alt="图片插入"> </p><h3 id="字体颜色"><a href="#字体颜色" class="headerlink" title="字体颜色"></a>字体颜色</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;font color=<span class="comment">#00ffff&gt;color=#00ffff&lt;/font&gt;</span></span><br></pre></td></tr></table></figure><font color="#00ffff">color=#00ffff</font><p><a href="https://www.5tu.cn/colors/yansebiao.html">颜色表参考</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://candinya.com/posts/Kratos-Rebirth-Manual/#%E5%AE%89%E8%A3%85%E6%8F%90%E7%A4%BA">部分参考来源</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;h3 id=&quot;网页属性&quot;&gt;&lt;a href=&quot;#网页属性&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="学习" scheme="http://kennyyyyyy.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="错误总结" scheme="http://kennyyyyyy.github.io/tags/%E9%94%99%E8%AF%AF%E6%80%BB%E7%BB%93/"/>
    
    <category term="经验" scheme="http://kennyyyyyy.github.io/tags/%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
</feed>
